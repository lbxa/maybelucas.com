---
import DarkMode from "@components/DarkMode/DarkMode.astro";
import Nav from "@components/Nav.astro";
import Particles from "@components/Particles/Particles.astro";
import "../styles/global.css";
import GAnalytics from "@components/GAnalytics.astro";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  showSlider?: boolean;
}

const { title, showSlider = true } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Personal website and blog. Opinions are my own." />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="#f5f5f5" id="theme-color" />
    <meta name="mobile-web-app-capable" content="yes" />
    <title>{title}</title>
    <GAnalytics />
    <ClientRouter />
    <link rel="icon" type="image/png" href="/icons/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg" />
    <link rel="shortcut icon" href="/icons/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="maybelucas" />
    <link rel="manifest" href="/icons/site.webmanifest" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css"
      integrity="sha384-MlJdn/WNKDGXveldHDdyRP1R4CTHr3FeuDNfhsLPYrq2t0UBkUdK2jyTnXPEK1NQ"
      crossorigin="anonymous"
      media="print"
      onload="this.media='all'"
    />
    <script is:inline>
      // fetch user dark mode settings
      // inline option removes astro overhead - no theme flickering
      (() => {
        const theme = (() => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          }
          return "light";
        })();

        function applyTheme() {
          const currentTheme = localStorage.getItem("theme") || theme;
          if (currentTheme === "light") {
            document.documentElement.classList.remove("dark");
          } else {
            document.documentElement.classList.add("dark");
          }
          window.localStorage.setItem("theme", currentTheme);
        }

        // Apply theme immediately
        applyTheme();

        // Reapply theme on ViewTransitions navigation
        document.addEventListener("astro:page-load", applyTheme);

        // Theme color management for mobile browsers
        let themeColorObserver = null;

        function setupThemeColor() {
          // Clean up existing observer if any
          if (themeColorObserver) {
            themeColorObserver.disconnect();
          }

          // Get fresh reference to meta tag
          const themeColorMetaTag = document.querySelector(
            'meta[name="theme-color"]',
          );

          function updateThemeColor() {
            const isDarkMode =
              document.documentElement.classList.contains("dark");
            themeColorMetaTag?.setAttribute(
              "content",
              isDarkMode ? "#121212" : "#f5f5f5",
            );
          }

          // Initial call to set the theme color based on current mode
          updateThemeColor();

          // Set up new observer
          themeColorObserver = new MutationObserver(updateThemeColor);
          themeColorObserver.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
          });
        }

        // Setup theme color initially
        setupThemeColor();

        // Re-setup theme color on ViewTransitions navigation
        document.addEventListener("astro:page-load", setupThemeColor);
      })();
    </script>
    <script is:inline>
      // dark mode init
      const handleToggleClick = () => {
        const element = document.documentElement;
        element.classList.toggle("dark");

        const isDark = element.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      };

      function attachDarkModeListener() {
        const themeToggle = document.getElementById("themeToggle");
        if (themeToggle) {
          // Remove existing listener to prevent duplicates
          themeToggle.removeEventListener("click", handleToggleClick);
          // Add the listener
          themeToggle.addEventListener("click", handleToggleClick);
        }
      }

      // Initial attachment
      document.addEventListener("DOMContentLoaded", attachDarkModeListener);

      // Reattach on every ViewTransitions navigation
      document.addEventListener("astro:page-load", attachDarkModeListener);
    </script>
  </head>
  <body>
    <div
      class="z-50 fixed top-0 left-0 m-auto h-[50px] py-md w-full bg-ivory/50 dark:bg-shark-950/50 backdrop-blur-sm"
    >
      <div class="flex mx-auto px-lg lg:px-0 max-w-screen-sm">
        <Nav />
        <div class="ml-auto">
          <DarkMode transition:persist />
        </div>
      </div>
    </div>
    <slot />
    <Particles transition:persist showSlider={showSlider} />
  </body>
</html>
