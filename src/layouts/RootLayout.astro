---
import DarkMode from "@components/DarkMode/DarkMode.astro";
import Nav from "@components/Nav.astro";
import Particles from "@components/Particles/Particles.astro";
import "../styles/global.css";
import GAnalytics from "@components/GAnalytics.astro";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Personal website and blog. Opinions are my own."
    />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="#f5f5f5" id="theme-color" />
    <meta name="mobile-web-app-capable" content="yes" />
    <title>{title}</title>

    <!-- DNS prefetch for external domains -->
    <link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
    <link rel="dns-prefetch" href="//www.googletagmanager.com" />

    <!-- Preload critical fonts -->
    <link
      rel="preload"
      href="/fonts/NeueMontreal/NeueMontreal-Regular.otf"
      as="font"
      type="font/otf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/Signifier/Signifier-Light.otf"
      as="font"
      type="font/otf"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/Signifier/Signifier-Black.otf"
      as="font"
      type="font/otf"
      crossorigin
    />

    <!-- Preload and defer KaTeX CSS -->
    <link
      rel="preload"
      href="https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet';"
    />
    <noscript
      ><link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/katex@0.15.2/dist/katex.min.css"
      /></noscript
    >

    <GAnalytics />
    <ClientRouter />
    <style is:inline>
      #themeToggle,
      #themeToggle * {
        view-transition-name: none;
      }

      html[data-route-changing] #themeToggle,
      html[data-route-changing] #themeToggle *,
      html.preload #themeToggle,
      html.preload #themeToggle * {
        transition: none !important;
        animation: none !important;
      }
    </style>
    <script is:inline>
      document.documentElement.classList.add("preload");
      addEventListener("astro:page-load", () =>
        document.documentElement.classList.remove("preload")
      );
      addEventListener("load", () =>
        document.documentElement.classList.remove("preload")
      );
    </script>
    <link
      rel="icon"
      type="image/png"
      href="/icons/favicon-96x96.png"
      sizes="96x96"
    />
    <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg" />
    <link rel="shortcut icon" href="/icons/favicon.ico" />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/icons/apple-touch-icon.png"
    />
    <meta name="apple-mobile-web-app-title" content="maybelucas" />
    <link rel="manifest" href="/icons/site.webmanifest" />
    <script is:inline>
      // fetch user dark mode settings
      // inline option removes astro overhead - no theme flickering
      (() => {
        const theme = (() => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          }
          return "light";
        })();

        function applyTheme() {
          const wanted = (() => {
            if (
              typeof localStorage !== "undefined" &&
              localStorage.getItem("theme")
            ) {
              return localStorage.getItem("theme");
            }
            if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
              return "dark";
            }
            return "light";
          })();

          const html = document.documentElement;
          const hasDark = html.classList.contains("dark");

          if (wanted === "dark" && !hasDark) {
            html.classList.add("dark");
          }
          if (wanted === "light" && hasDark) {
            html.classList.remove("dark");
          }

          localStorage.setItem("theme", wanted);
        }

        // Apply theme immediately
        applyTheme();

        // Reapply theme on ViewTransitions navigation
        document.addEventListener("astro:page-load", applyTheme);

        // Theme color management for mobile browsers
        let themeColorObserver = null;

        function setupThemeColor() {
          // Clean up existing observer if any
          if (themeColorObserver) {
            themeColorObserver.disconnect();
          }

          // Get fresh reference to meta tag
          const themeColorMetaTag = document.querySelector(
            'meta[name="theme-color"]'
          );

          function updateThemeColor() {
            const isDarkMode =
              document.documentElement.classList.contains("dark");
            themeColorMetaTag?.setAttribute(
              "content",
              isDarkMode ? "#121212" : "#f5f5f5"
            );
          }

          // Initial call to set the theme color based on current mode
          updateThemeColor();

          // Set up new observer
          themeColorObserver = new MutationObserver(updateThemeColor);
          themeColorObserver.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
          });
        }

        // Setup theme color initially
        setupThemeColor();

        // Re-setup theme color on ViewTransitions navigation
        document.addEventListener("astro:page-load", setupThemeColor);
      })();
    </script>
    <script is:inline>
      // Suppress switch transitions during navigation
      document.addEventListener("astro:before-preparation", () => {
        document.documentElement.setAttribute("data-route-changing", "");
      });
      document.addEventListener("astro:page-load", () => {
        document.documentElement.removeAttribute("data-route-changing");
      });
    </script>
    <script is:inline>
      // Mobile detection
      const isMobile =
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
          navigator.userAgent
        ) || window.innerWidth < 768;
      if (isMobile) {
        document.documentElement.classList.add("is-mobile");
      }
    </script>
  </head>
  <body>
    <div
      class="z-50 fixed top-0 left-0 m-auto h-[50px] py-md w-full bg-ivory/50 dark:bg-shark-950/50 backdrop-blur-sm"
    >
      <div class="flex mx-auto px-lg lg:px-0 max-w-screen-sm items-center">
        <Nav />
        <div class="ml-auto flex items-center">
          <DarkMode transition:persist />
        </div>
      </div>
    </div>
    <slot />
    <Particles transition:persist />
  </body>
</html>
